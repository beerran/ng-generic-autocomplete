!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@ng-bootstrap/ng-bootstrap"),require("rxjs/Observable"),require("rxjs/add/observable/of"),require("rxjs/add/operator/catch"),require("rxjs/add/operator/debounceTime"),require("rxjs/add/operator/distinctUntilChanged"),require("rxjs/add/operator/do"),require("rxjs/add/operator/map"),require("rxjs/add/operator/switchMap"),require("rxjs/add/operator/merge"),require("@angular/forms")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/common","@ng-bootstrap/ng-bootstrap","rxjs/Observable","rxjs/add/observable/of","rxjs/add/operator/catch","rxjs/add/operator/debounceTime","rxjs/add/operator/distinctUntilChanged","rxjs/add/operator/do","rxjs/add/operator/map","rxjs/add/operator/switchMap","rxjs/add/operator/merge","@angular/forms"],t):t((e.ng=e.ng||{},e.ng.genericAutocompleteComponent=e.ng.genericAutocompleteComponent||{}),e.ng.core,e._angular_common,e._ngBootstrap_ngBootstrap,e.Rx,e.Rx.Observable,null,null,null,null,e.Rx.Observable.prototype,null,null,e._angular_forms)}(this,function(e,t,r,n,o,a,i,s,l,p,u,c,d,h){"use strict";var m=function(){function e(){var e=this;this.itemList=[],this.propertyName="",this.outputProperties=[],this.outputDelimiter=" ",this.title="Search",this.placeholder="Search..",this.failedText="No items matched your search",this.helpText="Begin typing and search suggestions will appear",this.fetchDataText="Click to fetch data",this.showTitle=!0,this.showHelpText=!0,this.clearInput=!0,this.onItemSelect=new t.EventEmitter,this.onFetchData=new t.EventEmitter,this.showItems=!1,this.showTableText=!0,this.tableText="Or choose from all items..",this.pageSize=5,this.maxSize=5,this.tableActive=!0,this.page=1,this.searching=!1,this.searchFailed=!1,this.hideSearchingWhenUnsubscribed=new o.Observable(function(){return function(){return e.searching=!1}}),this.inputFormatter=function(t){return e.clearInput?null:t[e.propertyName]},this.resultFormatter=function(t){return e.formatOutput(t)},this.hasItems=function(){return e.itemList.length>0},this.search=function(t){return t.debounceTime(300).distinctUntilChanged().do(function(){return e.searching=!0}).switchMap(function(t){return e.searchInternalList(t).do(function(t){e.searchFailed=!1}).catch(function(){return e.searchFailed=!0,o.Observable.of([])})}).do(function(){return e.searching=!1}).merge(e.hideSearchingWhenUnsubscribed)}}return e.prototype.searchInternalList=function(e){var t=this,r=e.toUpperCase();return""===e?o.Observable.of([]):o.Observable.of(this.itemList.filter(function(e){return e[t.propertyName].toString().toUpperCase().substr(0,r.length)===r}))},e.prototype.tableSelect=function(e){this.onItemSelect.emit(e)},e.prototype.formatOutput=function(e){var t=this;if(this.outputProperties&&this.outputProperties.length>0){return this.outputProperties.map(function(r){return t.resolve(r,e)}).join(this.outputDelimiter)}return e[this.propertyName]},e.prototype.itemSelected=function(e){var t=e.item;this.onItemSelect.emit(t)},e.prototype.fetchData=function(){this.onFetchData.emit(!0)},e.prototype.resolve=function(e,t){return null===e?"":e.split(".").reduce(function(e,t){return e?e[t]:null},t)},e.decorators=[{type:t.Component,args:[{selector:"generic-autocomplete",template:'\n  <label for="typeahead" *ngIf="showTitle">{{ title }}</label>\n  <div class="overlay" *ngIf="hasItems() !== true" (click)="fetchData()">\n      <span class="overlay-text"><i class="fa fa-refresh"></i> {{ fetchDataText }}</span>\n  </div>\n  <input id="typeahead" [disabled]="hasItems() !== true" type="text" class="form-control" name="typeahead" aria-describedby="typeaheadHelp" [class.is-invalid]="searchFailed" [(ngModel)]="model" [ngbTypeahead]="search" [inputFormatter]="inputFormatter" [resultFormatter]="resultFormatter"\n      [placeholder]="hasItems() ? placeholder : \'\'" (selectItem)="itemSelected($event)" />\n  <small id="typeaheadHelp" class="form-text text-muted" *ngIf="showHelpText">\n      {{ helpText }}\n  </small>\n  <div class="invalid-feedback" *ngIf="searchFailed">{{ failedText }}</div>\n  <span *ngIf="searching">Searching...</span>\n  \n  <div *ngIf="showItems && hasItems()">\n      <div class="row">\n          <div class="col-6">\n              <small class="form-text text-muted" *ngIf="showTableText">{{ tableText }}</small>\n          </div>\n          <div class="col-6 text-right">\n              <small class="form-text text-muted pointer" (click)="tableActive = !tableActive">{{tableActive ? \'Hide\' : \'Show\'}}</small>    \n          </div>\n      </div>\n      <div class="row" *ngIf="tableActive">\n          <div class="col-6">\n              <div class="input-group input-group-sm">\n                  <div class="input-group-addon input-group-sm">Items per page</div>\n                  <select class="form-control form-control-sm" [(ngModel)]="pageSize">\n                      <option value="5">5</option>\n                      <option value="10">10</option>\n                      <option value="25">25</option>\n                      <option value="50">50</option>\n                  </select>\n              </div>\n          </div>\n          <div class="col-6 d-flex">\n              <ngb-pagination class="mx-auto" [collectionSize]="itemList.length" [rotate]="true" [maxSize]="maxSize" [pageSize]="pageSize" [(page)]="page" [boundaryLinks]="true" size="sm"></ngb-pagination>\n          </div>\n      </div>\n      <div class="row" *ngIf="tableActive">\n          <div class="col-12">\n              <table class="table table-striped table-hover table-sm">\n                  <tr class="pointer" (click)="tableSelect(item)" *ngFor="let item of itemList | slice:(page-1)*pageSize:pageSize*page">\n                      <td>{{formatOutput(item)}}</td>\n                  </tr>\n              </table>\n          </div>\n      </div>\n  </div>\n  ',styles:["\n  .overlay {\n    text-align: center;\n    position: absolute;\n    width: calc(100% - 2rem);\n    font-size: 1rem;\n    line-height:1.25;\n    padding:0.5rem 0.75rem;\n    cursor:pointer;\n  }\n  .overlay span.overlay-text {\n    color: #505050;\n    font-weight: 700;\n  }\n  "]}]}],e.ctorParameters=function(){return[]},e.propDecorators={itemList:[{type:t.Input}],propertyName:[{type:t.Input}],outputProperties:[{type:t.Input}],outputDelimiter:[{type:t.Input}],title:[{type:t.Input}],placeholder:[{type:t.Input}],failedText:[{type:t.Input}],helpText:[{type:t.Input}],fetchDataText:[{type:t.Input}],showTitle:[{type:t.Input}],showHelpText:[{type:t.Input}],clearInput:[{type:t.Input}],onItemSelect:[{type:t.Output}],onFetchData:[{type:t.Output}],showItems:[{type:t.Input}],showTableText:[{type:t.Input}],tableText:[{type:t.Input}],pageSize:[{type:t.Input}],maxSize:[{type:t.Input}]},e}(),g=function(){function e(){}return e.forRoot=function(){return{ngModule:e,providers:[]}},e.decorators=[{type:t.NgModule,args:[{imports:[n.NgbModule.forRoot(),r.CommonModule,h.FormsModule],declarations:[m],exports:[m]}]}],e.ctorParameters=function(){return[]},e}();e.GenericAutocompleteModule=g,e.GenericAutocompleteComponent=m,Object.defineProperty(e,"__esModule",{value:!0})});