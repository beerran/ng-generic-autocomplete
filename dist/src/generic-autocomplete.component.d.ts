import { EventEmitter } from '@angular/core';
import { NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/merge';
export declare class GenericAutocompleteComponent {
    itemList: any[];
    propertyName: string;
    outputProperties: string[];
    outputDelimiter: string;
    title: string;
    placeholder: string;
    failedText: string;
    helpText: string;
    fetchDataText: string;
    showTitle: boolean;
    showHelpText: boolean;
    clearInput: boolean;
    onItemSelect: EventEmitter<any>;
    onFetchData: EventEmitter<boolean>;
    showItems: boolean;
    showTableText: boolean;
    tableText: string;
    pageSize: number;
    maxSize: number;
    tableActive: boolean;
    page: number;
    model: any;
    searching: boolean;
    searchFailed: boolean;
    hideSearchingWhenUnsubscribed: Observable<{}>;
    constructor();
    inputFormatter: (input: any) => any;
    resultFormatter: (input: any) => any;
    hasItems: () => boolean;
    search: (query: Observable<string>) => Observable<any>;
    searchInternalList(term: string): Observable<any>;
    tableSelect(item: any): void;
    formatOutput(item: any): any;
    itemSelected(event: NgbTypeaheadSelectItemEvent): void;
    fetchData(): void;
    private resolve(path, obj);
}
